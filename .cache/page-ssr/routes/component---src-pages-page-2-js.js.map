{"version":3,"file":"component---src-pages-page-2-js.js","mappings":"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","sources":["webpack://@r-ichard/gatsby-starter-bootstrap-5/./node_modules/camelcase/index.js","webpack://@r-ichard/gatsby-starter-bootstrap-5/../src/image-utils.ts","webpack://@r-ichard/gatsby-starter-bootstrap-5/../src/components/hooks.ts","webpack://@r-ichard/gatsby-starter-bootstrap-5/../src/components/picture.tsx","webpack://@r-ichard/gatsby-starter-bootstrap-5/../src/components/placeholder.tsx","webpack://@r-ichard/gatsby-starter-bootstrap-5/../src/components/main-image.tsx","webpack://@r-ichard/gatsby-starter-bootstrap-5/../src/components/layout-wrapper.tsx","webpack://@r-ichard/gatsby-starter-bootstrap-5/../src/components/gatsby-image.server.tsx","webpack://@r-ichard/gatsby-starter-bootstrap-5/../src/components/static-image.server.tsx","webpack://@r-ichard/gatsby-starter-bootstrap-5/./src/components/navbar.js","webpack://@r-ichard/gatsby-starter-bootstrap-5/./src/styles/logobar.module.scss","webpack://@r-ichard/gatsby-starter-bootstrap-5/./src/components/logobar.js","webpack://@r-ichard/gatsby-starter-bootstrap-5/./src/styles/layoutPage.module.scss","webpack://@r-ichard/gatsby-starter-bootstrap-5/./src/components/layout.js","webpack://@r-ichard/gatsby-starter-bootstrap-5/./src/hooks/use-site-metadata.js","webpack://@r-ichard/gatsby-starter-bootstrap-5/./src/components/seo.js","webpack://@r-ichard/gatsby-starter-bootstrap-5/./src/pages/page-2.js"],"sourcesContent":["'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import * as React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Link } from \"gatsby\"\r\nimport \"../styles/navbar.scss\"\r\n\r\nconst isActive = ({ isCurrent }) => {\r\n  return isCurrent\r\n    ? { className: \"nav-link active\" }\r\n    : { className: \"nav-link\" }\r\n}\r\n\r\nconst ExactNavLink = props => <Link getProps={isActive} {...props} />\r\n\r\nconst Navbar = ({ siteTitle }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n      <div className=\"container-fluid\">\r\n        {/* <Link to=\"/\" className=\"navbar-brand d-md-none\" href=\"#\">\r\n          {siteTitle}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#main-navbar\"\r\n          aria-controls=\"main-navbar\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button> */}\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"main-navbar\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-md-0 d-flex w-100 justify-content-center gap-5 py-3 px-md-5 bg-dark\">\r\n            <li className=\"nav-item bg-light text-center\">\r\n              <ExactNavLink to=\"/\">Home</ExactNavLink>\r\n            </li>\r\n            <li className=\"nav-item bg-light text-center p-0\">\r\n              <ExactNavLink to=\"/about\">Tour</ExactNavLink>\r\n            </li>\r\n            <li className=\"nav-item bg-light text-center\">\r\n              <ExactNavLink to=\"/about\">Participant</ExactNavLink>\r\n            </li>\r\n            <li className=\"nav-item bg-light text-center\">\r\n              <ExactNavLink to=\"/about\">Shop</ExactNavLink>\r\n            </li>\r\n            <li className=\"nav-item bg-light text-center\">\r\n              <ExactNavLink to=\"/about\">Contact</ExactNavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  siteTitle: PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  siteTitle: ``,\r\n}\r\n\r\nexport default Navbar\r\n","// Exports\nexport var logoContainer = \"logobar-module--logoContainer--804b6\";\nexport var flag = \"logobar-module--flag--69ba0\";\n","import \"@fontsource/ubuntu\" // Importing lato font. Defaults to weight 400.\r\n\r\nimport React from \"react\"\r\nimport * as styles from \"../styles/logobar.module.scss\"\r\nimport { StaticImage } from \"gatsby-plugin-image\"\r\n\r\nexport default function Logobar() {\r\n  return (\r\n    <div className=\"container-fluid position-relative\">\r\n      <div className=\"row text-center\">\r\n        <div\r\n          className={`col-auto mx-auto d-flex justify-content-center align-items-center ${styles.logoContainer}`}\r\n        >\r\n          <StaticImage\r\n            src=\"../images/logo.png\"\r\n            alt=\"logo\"\r\n            className=\"img-fluid\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"row position-absolute w-100\">\r\n        <div className={`${styles.flag} col-12 p-0`}>\r\n          <img\r\n            src=\"https://media.istockphoto.com/id/460844989/photo/the-indian-flag-with-horizontal-tricolor-design.jpg?s=170667a&w=0&k=20&c=ZeNZN0jUpsgoMs8nkwSB6AGeyvDpg3lCN3Nd4qjcpcg=\"\r\n            alt=\"flag\"\r\n            className=\"img-fluid\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","// Exports\nexport var heroMidSection = \"layoutPage-module--heroMidSection--f98d4\";\nexport var heroWrapper = \"layoutPage-module--heroWrapper--2cbde\";\n","import * as React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nimport Navbar from \"./navbar\"\r\nimport Logobar from \"./logobar\"\r\nimport \"./layout.scss\"\r\nimport * as styles from \"../styles/layoutPage.module.scss\"\r\n\r\nconst Layout = ({ children }) => {\r\n  const data = useStaticQuery(graphql`\r\n    query SiteTitleQuery {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <div className={`${styles.heroWrapper} container-fluid p-0`}>\r\n      <Logobar />\r\n      <div className={`${styles.heroMidSection} container-fluid px-0`}>\r\n        {children}\r\n      </div>\r\n      <Navbar siteTitle={data.site.siteMetadata?.title || `Title`} />\r\n    </div>\r\n  )\r\n}\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Layout\r\n","import { graphql, useStaticQuery } from \"gatsby\"\r\n\r\nexport const useSiteMetadata = () => {\r\n    const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n      }\r\n    }\r\n  `)\r\n\r\n    return data.site.siteMetadata\r\n}","import React from \"react\"\r\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\"\r\n\r\nexport const Seo = ({ title, description, pathname, children }) => {\r\n    const { title: defaultTitle, description: defaultDescription, siteUrl } = useSiteMetadata()\r\n\r\n    const seo = {\r\n        title: title || defaultTitle,\r\n        description: description || defaultDescription,\r\n        url: `${siteUrl}${pathname || ``}`,\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <title>{seo.title}</title>\r\n            <meta name=\"description\" content={seo.description} />\r\n            <meta name=\"twitter:title\" content={seo.title} />\r\n            <meta name=\"twitter:url\" content={seo.url} />\r\n            <meta name=\"twitter:description\" content={seo.description} />\r\n            {children}\r\n        </>\r\n    )\r\n}","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport {Seo} from \"../components/seo\"\r\n\r\nconst SecondPage = () => (\r\n  <Layout>\r\n    <div className=\"container text-center my-5\">\r\n      <h1>Hi from the second page</h1>\r\n      <p>Welcome to page 2</p>\r\n      <Link to=\"/\">Go back to the homepage</Link>\r\n    </div>\r\n  </Layout>\r\n)\r\n\r\nexport default SecondPage\r\n\r\nexport const Head = () => (\r\n    <Seo title=\"Page two\" />\r\n)\r\n"],"names":["message","warn","a","b","images","map","src","image","width","join","filename","lastIndexOf","dot","slice","ext","length","args","layout","height","sourceMetadata","breakpoints","aspectRatio","formats","toLowerCase","camelCase","Math","round","generateImageSource","setDefaultDimensions","format","fit","options","_generateImageSource","pluginName","reporter","backgroundColor","placeholderURL","formatFromFilename","size","has","add","imgDimensions","DEFAULT_BREAKPOINTS","Object","entries","filter","_","erroneousUserDimensions","outputPixelDensities","dedupeAndSortDensities","DEFAULT_PIXEL_DENSITIES","getDimensionsAndAspectRatio","calculated","fixedDimension","sizes","densities","density","presentationWidth","originalWidth","presentationHeight","unscaledWidth","calculateImageSizes","sources","getSizes","imageSizes","forEach","imageSrc","Boolean","find","unscaled","result","fallback","srcSet","getSrcSet","push","type","imageProps","placeholder","values","from","sort","sortNumeric","min","includes","dimensions","Number","MAX_SAFE_INTEGER","widthOption","heightOption","imageAspectRatio","max","GATSBY___IMAGE","node","_node$images","_node$images$fallback","isGatsbyImageData","gatsbyImageData","isGatsbyImageDataParent","gatsbyImage","isGatsbyImageParent","childImageSharp","_node$childImageSharp","getImage","_getImage","_getImage$images","_getImage$images$fall","_getImage2","_getImage2$images","_getImage2$images$fal","baseUrl","urlBuilder","sourceWidth","sourceHeight","props","EVERY_BREAKPOINT","defaultImage","artDirected","media","process","env","NODE_ENV","console","output","source","loading","alt","shouldLoad","decoding","undefined","React","Image","key","fallbackImage","propTypes","PropTypes","string","isRequired","bool","Picture","displayName","exact","arrayOf","oneOfType","Placeholder","_Picture$propTypes","propName","componentName","MainImage","dangerouslySetInnerHTML","__html","style","paddingTop","maxWidth","display","role","position","children","Fragment","Sizer","NativeScriptLoading","str","replace","as","className","preactClass","imgClassName","imgStyle","objectFit","objectPosition","placeholderBackgroundColor","gatsbyImageIsInstalled","wrapperStyle","overflow","verticalAlign","getWrapperProps","wStyle","wClass","wrapperProps","cleanedImages","removeNewLines","createElement","LayoutWrapper","isLoaded","top","left","bottom","right","opacity","transition","getPlaceholderProps","isLoading","transform","willChange","getMainProps","GatsbyImage","imageData","__imageData","__error","_getStaticImage","GatsbyImageServer","number","checkDimensionProps","validLayouts","StaticImage","Link","isActive","isCurrent","ExactNavLink","Navbar","siteTitle","defaultProps","styles","Logobar","logoContainer","flag","useStaticQuery","Layout","data","heroWrapper","heroMidSection","site","siteMetadata","title","useSiteMetadata","Seo","description","pathname","defaultTitle","defaultDescription","siteUrl","seo","url","SecondPage","Head"],"sourceRoot":""}